name: Android CI

on:
  push:
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # --- CI/Debug Build Path ---
      - name: Build Debug APK
        if: (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')) || github.event_name == 'pull_request'
        run: ./gradlew assembleDebug

      - name: Rename Debug APK
        if: (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')) || github.event_name == 'pull_request'
        id: rename_debug_apk
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          NEW_NAME="de.meonwax.soundboard-${SHORT_HASH}.apk"
          mv app/build/outputs/apk/debug/app-debug.apk "${NEW_NAME}"
          echo "apk_name=${NEW_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Debug APK
        if: (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')) || github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.rename_debug_apk.outputs.apk_name }}
          path: ${{ steps.rename_debug_apk.outputs.apk_name }}

      # --- Release Build Path ---
      - name: Decode Keystore
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')
        env:
          SIGNING_KEY_STORE_BASE64: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
        run: |
          echo -n $SIGNING_KEY_STORE_BASE64 > keystore.jks.base64
          base64 -d keystore.jks.base64 > app/keystore.jks

      - name: Build Signed APK
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')
        env:
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -PreleaseKeyStore=keystore.jks \
            -PreleaseKeyStorePassword=$SIGNING_STORE_PASSWORD \
            -PreleaseKeyAlias=$SIGNING_KEY_ALIAS \
            -PreleaseKeyAliasPassword=$SIGNING_KEY_PASSWORD

      - name: Prepare Release Asset Name
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')
        id: prepare_asset
        run: |
          VERSION_NAME="${{ github.ref_name }}"
          # Strip 'v' prefix
          VERSION_NAME=${VERSION_NAME#v}
          APK_NAME="de.meonwax.soundboard-${VERSION_NAME}.apk"
          echo "apk_name=${APK_NAME}" >> $GITHUB_OUTPUT

      - name: Rename Release APK
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')
        run: mv app/build/outputs/apk/release/app-release.apk ./${{ steps.prepare_asset.outputs.apk_name }}

      - name: Get Release to Upload To
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref_name }}

      - name: Upload APK to Release
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./${{ steps.prepare_asset.outputs.apk_name }}
          asset_name: ${{ steps.prepare_asset.outputs.apk_name }}
          asset_content_type: application/vnd.android.package-archive
